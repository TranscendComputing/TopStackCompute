<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:oxm="http://www.springframework.org/schema/oxm"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc"
    xmlns:lang="http://www.springframework.org/schema/lang"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns="http://www.springframework.org/schema/beans"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd" >

    <import resource="classpath:cloud-config.xml" />
    <!-- ============================== -->
    <!-- inject compute util classes (helpers, etc.) -->
    <context:component-scan base-package="com.msi.compute" />
    <!-- inject core action classes (ActionTestHelper, etc.) -->
    <context:component-scan base-package="com.msi.tough.query" />
    <!-- inject project action classes (Describe, etc.) -->
    <context:component-scan base-package="com.transcend.compute" />

    <bean class="com.msi.tough.core.AppctxInjector"/>
    <bean id="servicesPropertyConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
                <list>
                        <value>classpath*:/*.properties</value>
                </list>
        </property>
    </bean>

    <!-- auto-inject, autowire using annotations -->
    <context:annotation-config />

    <!-- service definitions from application context -->
    <bean id="AttachVolume"
        class="com.transcend.compute.actions.AttachVolume"/>

    <bean id="AttachVolumeWorker"
        class="com.transcend.compute.worker.AttachVolumeWorker"/>

    <bean id="AuthorizeSecurityGroupIngress"
        class="com.transcend.compute.actions.AuthorizeSecurityGroupIngress"/>

    <bean id="AuthorizeSecurityGroupIngressWorker"
        class="com.transcend.compute.worker.AuthorizeSecurityGroupIngressWorker"/>

    <bean id="RevokeSecurityGroupIngress"
        class="com.transcend.compute.actions.RevokeSecurityGroupIngress"/>

    <bean id="RevokeSecurityGroupIngressWorker"
        class="com.transcend.compute.worker.RevokeSecurityGroupIngressWorker"/>

    <bean id="DescribeInstancesV2"
        class="com.transcend.compute.actions.DescribeInstancesV2"/>

    <bean id="DescribeInstancesWorker"
        class="com.transcend.compute.worker.DescribeInstancesWorker"/>

    <bean id="DeleteKeyPair"
        class="com.transcend.compute.actions.DeleteKeyPair"/>

    <bean id="DeleteKeyPairWorker"
        class="com.transcend.compute.worker.DeleteKeyPairWorker"/>

	 <bean id="DeleteSecurityGroup"
        class="com.transcend.compute.actions.DeleteSecurityGroup"/>

    <bean id="DeleteSecurityGroupWorker"
        class="com.transcend.compute.worker.DeleteSecurityGroupWorker"/>

	<bean id="DisassociateAddress"
        class="com.transcend.compute.actions.DisassociateAddress"/>

    <bean id="DisassociateAddressWorker"
        class="com.transcend.compute.worker.DisassociateAddressWorker"/>

    <bean id="CreateKeyPair"
        class="com.transcend.compute.actions.CreateKeyPair"/>

    <bean id="CreateKeyPairWorker"
        class="com.transcend.compute.worker.CreateKeyPairWorker"/>
    <bean id="ReleaseAddress"
        class="com.transcend.compute.actions.ReleaseAddress"/>

    <bean id="ReleaseAddressWorker"
        class="com.transcend.compute.worker.ReleaseAddressWorker"/>

    <bean id="RunInstances"
        class="com.transcend.compute.actions.RunInstances"/>

    <bean id="RunInstancesWorker"
        class="com.transcend.compute.worker.RunInstancesWorker"/>

    <bean id="AllocateAddress"
        class="com.transcend.compute.actions.AllocateAddress"/>

    <bean id="AllocateAddressWorker"
        class="com.transcend.compute.worker.AllocateAddressWorker"/>

    <bean id="AssociateAddress"
        class="com.transcend.compute.actions.AssociateAddress"/>

    <bean id="AssociateAddressWorker"
        class="com.transcend.compute.worker.AssociateAddressWorker"/>

    <bean id="CreateSecurityGroup"
        class="com.transcend.compute.actions.CreateSecurityGroup"/>

    <bean id="CreateSecurityGroupWorker"
        class="com.transcend.compute.worker.CreateSecurityGroupWorker"/>

	<bean id="DescribeSecurityGroups"
		class="com.transcend.compute.actions.DescribeSecurityGroups"/>

	<bean id="DescribeSecurityGroupsWorker"
		class="com.transcend.compute.worker.DescribeSecurityGroupsWorker"/>

    <bean id="TerminateInstances"
        class="com.transcend.compute.actions.TerminateInstances"/>

    <bean id="TerminateInstancesWorker"
        class="com.transcend.compute.worker.TerminateInstancesWorker"/>

    <bean id="CreateVolume"
        class="com.transcend.compute.actions.CreateVolume"/>

    <bean id="CreateVolumeWorker"
        class="com.transcend.compute.worker.CreateVolumeWorker"/>

    <bean id="DeleteVolume"
        class="com.transcend.compute.actions.DeleteVolume"/>

    <bean id="DeleteVolumeWorker"
        class="com.transcend.compute.worker.DeleteVolumeWorker"/>

    <bean id="DescribeVolumes"
        class="com.transcend.compute.actions.DescribeVolumes"/>

    <bean id="DescribeVolumesWorker"
        class="com.transcend.compute.worker.DescribeVolumesWorker"/>

    <bean id="computeServiceAsync"
        class="com.msi.tough.query.AsyncServiceImpl">
        <constructor-arg>
            <map>
                <entry key="AttachVolume" value-ref="AttachVolume"/>
                <entry key="AuthorizeSecurityGroupIngress" value-ref="AuthorizeSecurityGroupIngress"/>
                <entry key="RevokeSecurityGroupIngress" value-ref="RevokeSecurityGroupIngress"/>
                <entry key="DescribeInstancesV2" value-ref="DescribeInstancesV2"/>
                <entry key="RunInstances" value-ref="RunInstances"/>
                <entry key="AllocateAddress" value-ref="AllocateAddress"/>
                <entry key="AssociateAddress" value-ref="AssociateAddress"/>
                <entry key="DisassociateAddress" value-ref="DisassociateAddress"/>
                <entry key="CreateVolume" value-ref="CreateVolume"/>
                <entry key="DeleteVolume" value-ref="DeleteVolume"/>
                <entry key="DeleteSecurityGroup" value-ref="DeleteSecurityGroup"/>
                <entry key="DescribeVolumes" value-ref="DescribeVolumes"/>
                <entry key="DescribeSecurityGroups" value-ref="DescribeSecurityGroups"/>
                <entry key="CreateSecurityGroup" value-ref="CreateSecurityGroup"/>
                <entry key="DeleteKeyPair" value-ref="DeleteKeyPair"/>
                <entry key="CreateKeyPair" value-ref="CreateKeyPair"/>
                <entry key="ReleaseAddress" value-ref="ReleaseAddress"/>
                <entry key="TerminateInstances" value-ref="TerminateInstances"/>
            </map>
        </constructor-arg>
    </bean>
    <bean id="snooper" class="com.transcend.compute.utils.Snooper"/>

    <bean id="endpoint" class="java.lang.String">
        <constructor-arg value="ActionIn"/>
    </bean>
    <bean id="rawEndpoint" class="java.lang.String">
        <constructor-arg value="DirectToZMQEntry"/>
    </bean>

    <bean id="workflow" factory-method="getInstance"
    class="com.msi.tough.workflow.core.MuleWorkflow"/>

    <bean class="com.msi.tough.query.ActionHelper">
    </bean>

    <bean
        id="log4jInitializer"
        class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">

        <property
            name="targetClass"
            value="org.springframework.util.Log4jConfigurer" />

        <property name="targetMethod" value="initLogging" />

        <property name="arguments" >
            <list>
                <value>classpath:log4j.xml</value>
            </list>
        </property>
    </bean>

    <bean id="accessKey" class="java.lang.String">
        <constructor-arg value="${test.accessKey}"/>
    </bean>

    <bean id="DB_PASSWORD" class="java.lang.String">
        <constructor-arg value="${db.password}"></constructor-arg>
    </bean>

    <bean id="INSTALL_ID" class="java.lang.String">
        <constructor-arg value="unit-test"></constructor-arg>
    </bean>

    <bean id="limitedQuotaAccessKey" class="java.lang.String">
        <constructor-arg value="${test.limitedQuotaAccessKey}"/>
    </bean>

    <bean id="limitedQuotaSecretKey" class="java.lang.String">
        <constructor-arg value="${test.limitedQuotaSecretKey}"/>
    </bean>

    <bean id="limitedQuotaOwnerId" class="java.lang.String">
        <constructor-arg value="${test.limitedQuotaOwnerId}"/>
    </bean>

    <bean id="limitedQuotaZone" class="java.lang.String">
        <constructor-arg value="${test.limitedQuotaZone}"/>
    </bean>

    <bean id="basicAWSCredentials" class="com.amazonaws.auth.BasicAWSCredentials" >
        <constructor-arg value="${test.accessKey}" />
        <constructor-arg value="${test.secretKey}" />
    </bean>

    <bean id="computeClient" class="com.amazonaws.services.ec2.AmazonEC2Client" >
        <constructor-arg ref="basicAWSCredentials" />
        <property name="endpoint" value="#{ defaultAvailabilityZone == 'us-east-1a' ? 'http://ec2.us-east-1.amazonaws.com/' : 'http://${deploy.ip}:8080/Compute/Action' }" />
    </bean>

    <bean id="computeClientV2" class="com.amazonaws.services.ec2.AmazonEC2Client" >
        <constructor-arg ref="basicAWSCredentials" />
        <property name="endpoint" value="#{ defaultAvailabilityZone == 'us-east-1a' ? 'http://ec2.us-east-1.amazonaws.com/' : 'http://${deploy.ip}:8080/Compute/comp-async/' }" />
    </bean>

    <bean id="targetServer" class="java.lang.String">
        <constructor-arg value="${deploy.ip}"/>
    </bean>

    <bean id="testerHost" class="java.lang.String">
        <constructor-arg value="${tester.host}"/>
    </bean>

    <bean id="defaultAvailabilityZone" class="java.lang.String">
        <constructor-arg value="${default.availability.zone}"/>
   </bean>

    <bean id="baseImageId" class="java.lang.String">
        <constructor-arg value="${base.image.id}"/>
   </bean>

    <bean id="testInstanceType" class="java.lang.String">
        <constructor-arg value="${default.flavor}"/>
   </bean>

    <bean id="defaultFlavor" class="java.lang.String">
        <constructor-arg value="${default.flavor}"/>
   </bean>

    <bean id="security" factory-method="getInstance"
        class="com.msi.tough.security.AESSecurity">
    </bean>

    <!-- stand-in for full cloud config, with only the current test. -->
    <util:map id="configuration0">
        <entry key="AvailabilityZone" value="${default.availability.zone}"></entry>
        <entry key="EC2_URL"
                        value="${ec2.endpoint}"></entry>
    </util:map>

    <bean id="configuration" factory-method="merge" class="com.msi.tough.core.MapUtil">
        <constructor-arg ref="cloud-config"></constructor-arg>
        <constructor-arg ref="configuration0"></constructor-arg>
    </bean>

    <bean id="appctx" factory-method="getInstanceForInjection"
        class="com.msi.tough.core.Appctx">
        <property name="configuration" ref="configuration"/>
    </bean>

    <bean id="hibernateUtil" class="com.msi.tough.core.HibernateUtil">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <bean id="sessionFactory"
        class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="dataSource" ref="testConnection" />
        <property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
        <property name="configurationClass" value="org.hibernate.cfg.AnnotationConfiguration"></property>
        <property name="hibernateProperties">
            <value>hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
                hibernate.cache.provider_class=org.hibernate.cache.NoCacheProvider
                hibernate.show_sql=true
                hibernate.hbm2ddl.auto=update
            </value>
        </property>
    </bean>

    <bean id="testConnection" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://${deploy.ip}:3306/msi" />
        <property name="username" value="msi" />
        <property name="password" value="${db.password}" />
        <property name="defaultAutoCommit" value="false"></property>
        <property name="initialSize" value="1"></property>
        <property name="maxActive" value="5"></property>
        <property name="testWhileIdle" value="false"></property>
        <property name="testOnBorrow" value="false"></property>
        <property name="testOnReturn" value="false"></property>
        <property name="validationQuery" value="SELECT 1"></property>
        <property name="timeBetweenEvictionRunsMillis" value="-1"></property>
        <property name="minIdle" value="0"></property>
        <property name="maxWait" value="5000"></property>
        <property name="removeAbandoned" value="false"></property>
    </bean>

    <!-- Actual test bean, for autowiring (mule base doesn't autowire well -->
    <bean class="com.msi.compute.integration.workflow.DescribeInstancesWorkerTest" />

</beans>
